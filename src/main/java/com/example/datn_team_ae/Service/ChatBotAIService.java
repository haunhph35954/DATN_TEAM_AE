package com.example.datn_team_ae.Service;

import com.example.datn_team_ae.DTO.SanPhamTuVanDTO;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.logging.Logger;

import org.apache.commons.text.StringEscapeUtils; // ƒê·∫£m b·∫£o ƒë√£ th√™m dependency v√†o pom.xml

@Service
public class ChatBotAIService {

    private static final Logger logger = Logger.getLogger(ChatBotAIService.class.getName());

    @Value("${gemini.api.key}")
    private String API_KEY;

    private final HttpClient httpClient = HttpClient.newHttpClient();

    // C·∫•u h√¨nh Retry
    private static final int MAX_RETRIES = 3; // S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
    private static final long INITIAL_RETRY_DELAY_MS = 500; // ƒê·ªô tr·ªÖ ban ƒë·∫ßu: 0.5 gi√¢y

    public String hoiGemini(String cauHoi, List<SanPhamTuVanDTO> danhSach) throws Exception {

        StringBuilder promptBuilder = new StringBuilder();

        promptBuilder.append("B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n th·ªùi trang cho c·ª≠a h√†ng MinLiNa. ")
                .append("Nhi·ªám v·ª• c·ªßa b·∫°n l√† t∆∞ v·∫•n c√°c s·∫£n ph·∫©m th·ªùi trang v√† qu·∫ßn √°o C√ì S·∫¥N trong kho c·ªßa MinLiNa. ")
                .append("Shop ch·ªâ b√°n qu·∫ßn √°o c·ªìn s·ªü n·ªØ. Ch·ªâ t·∫≠p trung v√†o th·ªùi trang, qu·∫ßn √°o, s·∫£n ph·∫©m c·ª≠a h√†ng, ho·∫∑c c√°c v·∫•n ƒë·ªÅ mua s·∫Øm li√™n quan.")
                .append("H√£y tr·∫£ l·ªùi m·ªôt c√°ch NG·∫ÆN G·ªåN, S√öC T√çCH, TR·ª∞C TI·∫æP v√† c√≥ ƒê·ªäNH D·∫†NG D·ªÑ ƒê·ªåC, KH√îNG D√ÄI D√íNG. ")
                .append("Khi li·ªát k√™ s·∫£n ph·∫©m ho·∫∑c th√¥ng tin chi ti·∫øt, h√£y s·ª≠ d·ª•ng D·∫§U G·∫†CH ƒê·∫¶U D√íNG (-) ho·∫∑c NG·∫ÆT D√íNG r√µ r√†ng. ")
                .append("Kh√¥ng tr·∫£ l·ªùi qu√° 3-4 c√¢u ch√≠nh, nh∆∞ng th√¥ng tin s·∫£n ph·∫©m c√≥ th·ªÉ ƒë∆∞·ª£c li·ªát k√™. ")
                .append("S·ªë ƒëi·ªán tho·∫°i c·ª≠a h√†ng l√† 0789237639 ")
                .append("C√°ch ƒë·∫∑t h√†ng l√† t·∫°o t√†i kho·∫£n -> th√™m sp va√†o gi·ªè h√†ng -> ti·∫øn h√†nh ƒë·∫∑t h√†ng ho·∫∑c ƒë·ªãa ch·ªâ tr·ª±c ti·∫øp c·ª≠a h√†ng 479 Minh Khai, H√† N·ªôi")
                .append("N·∫øu c√¢u h·ªèi KH√îNG LI√äN QUAN ƒë·∫øn th·ªùi trang ho·∫∑c s·∫£n ph·∫©m c·ªßa MinLiNa, h√£y L·ªäCH S·ª∞ T·ª™ CH·ªêI v√† y√™u c·∫ßu kh√°ch h√†ng h·ªèi v·ªÅ th·ªùi trang.\n\n");

        promptBuilder.append("Kh√°ch h√†ng h·ªèi: \"")
                .append(cauHoi).append("\".\n");

        promptBuilder.append("Trong kho c·ªßa MinLiNa c√≥ sp sau:\n");

        if (danhSach == null || danhSach.isEmpty()) {
            promptBuilder.append("- Hi·ªán kh√¥ng c√≥ th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ n√†o ƒë∆∞·ª£c cung c·∫•p. H√£y tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c th·ªùi trang chung ho·∫∑c th√¥ng tin ƒë√£ bi·∫øt v·ªÅ MinLiNa n·∫øu c√≥, nh∆∞ng kh√¥ng ƒë·ªÅ c·∫≠p s·∫£n ph·∫©m c·ª• th·ªÉ.\n");
        } else {

            for (SanPhamTuVanDTO sp : danhSach) {
                promptBuilder.append("**üß• ").append(sp.getTenSanPham()).append("**\n")
                        .append("- M√†u: ").append(sp.getMauSac()).append("\n")
                        .append("- Size: ").append(sp.getKichThuoc()).append("\n")
                        .append("- S·ªë l∆∞·ª£ng c√≤n: ").append(sp.getSoLuong()).append("\n");

                if (sp.getUrlHinhAnh() != null && !sp.getUrlHinhAnh().isBlank()) {
                    promptBuilder.append("![·∫¢nh s·∫£n ph·∫©m](").append(sp.getUrlHinhAnh()).append(")\n");
                }

                promptBuilder.append("\n");
            }

        }
        promptBuilder.append("\nK·∫øt th√∫c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n m·ªôt c√°ch th√¢n thi·ªán v√† m·ªùi kh√°ch h√†ng ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi v·ªÅ th·ªùi trang.\n");
        String fullPrompt = promptBuilder.toString();

        String escapedPrompt = StringEscapeUtils.escapeJson(fullPrompt);

        logger.info("Prompt g·ªëc: " + fullPrompt);
        logger.info("Prompt ƒë√£ ƒë∆∞·ª£c escape JSON: " + escapedPrompt);

        String requestBody = """
        {
          "contents": [
            {
              "parts": [
                {
                  "text": "%s"
                }
              ]
            }
          ]
        }
        """.formatted(escapedPrompt);

        logger.info("JSON Request Body g·ª≠i ƒëi: " + requestBody);

        for (int retryCount = 0; retryCount < MAX_RETRIES; retryCount++) {
            HttpResponse<String> response = null;
            int statusCode = -1;
            String responseBody = "";

            try {
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=" + API_KEY))
                        .header("Content-Type", "application/json")
                        .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                        .build();

                response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

                responseBody = response.body();
                statusCode = response.statusCode();

                logger.info("Ph·∫£n h·ªìi t·ª´ Gemini API (Status: " + statusCode + ", L·∫ßn th·ª≠: " + (retryCount + 1) + "): " + responseBody);

                if (statusCode == 200) {
                    JSONObject json;
                    try {
                        json = new JSONObject(responseBody);
                    } catch (JSONException e) {
                        logger.severe("Check Loi test: " + e.getMessage() + ". Ph·∫£n h·ªìi: " + responseBody);
                        throw new Exception("loi phan hoi tu gemini", e);
                    }

                    if (json.has("error")) {
                        JSONObject error = json.getJSONObject("error");
                        String errorMessage = "gemini 200: " + error.optString("message", "check loi ko xac dinh.");
                        logger.warning(errorMessage);
                        throw new Exception(errorMessage);
                    }

                    if (json.has("promptFeedback")) {
                        JSONObject promptFeedback = json.getJSONObject("promptFeedback");
                        if (promptFeedback.has("blockReason")) {
                            String blockReason = promptFeedback.optString("blockReason", "UNKNOWN");
                            String safetyRatingsInfo = promptFeedback.optString("safetyRatings", "N/A");
                            String errorMessage = "C√¢u h·ªèi b·ªã ch·∫∑n b·ªüi b·ªô l·ªçc an to√†n c·ªßa Gemini. L√Ω do: " + blockReason + ", X·∫øp h·∫°ng an to√†n: " + safetyRatingsInfo;
                            logger.warning(errorMessage);
                            return "Xin l·ªói B·∫°n, c√¢u h·ªèi c·ªßa b·∫°n kh√¥ng th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω do n·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi c√°c ch√≠nh s√°ch an to√†n.";
                        }
                    }

                    JSONArray candidates = json.optJSONArray("candidates");

                    if (candidates != null && candidates.length() > 0) {
                        try {
                            return candidates
                                    .getJSONObject(0)
                                    .getJSONObject("content")
                                    .getJSONArray("parts")
                                    .getJSONObject(0)
                                    .getString("text");
                        } catch (JSONException e) {
                            logger.severe("loi tu khoa json: " + e.getMessage() + ". Ph·∫£n h·ªìi: " + responseBody);
                            throw new Exception("gemini tra ve cau truc sai.", e);
                        }
                    } else {
                        String warningMessage = "gemini khong tra ve'" + cauHoi + "'. " + responseBody;
                        logger.warning(warningMessage);
                        return "Xin l·ªói B·∫°n, t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n l√∫c n√†y. B·∫°n c√≥ mu·ªën th·ª≠ h·ªèi l·∫°i c√¢u kh√°c kh√¥ng?"; // Kh√¥ng retry cho l·ªói n√†y
                    }
                }

                else if (statusCode == 503 || statusCode == 429 ) {
                    long currentDelay = INITIAL_RETRY_DELAY_MS * (long) Math.pow(2, retryCount);
                    logger.warning("Gemini API tr·∫£ v·ªÅ l·ªói " + statusCode + " (retryable). Th·ª≠ l·∫°i sau " + currentDelay + "ms. L·∫ßn th·ª≠: " + (retryCount + 1));
                    Thread.sleep(currentDelay);

                } else {
                    String errorMessage = "L·ªói t·ª´ Gemini API (HTTP Status: " + statusCode + "). ";
                    try {
                        JSONObject errorJson = new JSONObject(responseBody);
                        if (errorJson.has("error")) {
                            JSONObject error = errorJson.getJSONObject("error");
                            errorMessage += "M√£ l·ªói: " + error.optInt("code") + ", Th√¥ng b√°o: " + error.optString("message", "Kh√¥ng c√≥ th√¥ng b√°o l·ªói chi ti·∫øt.");
                        } else {
                            errorMessage += "phan hoi ko phai dang json: " + responseBody;
                        }
                    } catch (JSONException jsonParseError) {
                        errorMessage += "json error: " + responseBody;
                    }
                    logger.severe(errorMessage);
                    throw new Exception(errorMessage);
                }

            } catch (java.io.IOException e) {
                long currentDelay = INITIAL_RETRY_DELAY_MS * (long) Math.pow(2, retryCount);
                logger.warning("gui http sai cau truc: " + e.getMessage() + ". Th·ª≠ l·∫°i sau " + currentDelay + "ms. L·∫ßn th·ª≠: " + (retryCount + 1));
                Thread.sleep(currentDelay);
            } catch (InterruptedException e) {
                logger.severe("luong key api bi ngat.");
                Thread.currentThread().interrupt();
                throw new Exception("ket noi toi gemini that bai.", e);
            }
        }

        String finalErrorMessage = "ƒê√£ th·ª≠ l·∫°i " + MAX_RETRIES + " gemini dang trong qua trinh ket noi lai  .";
        logger.severe(finalErrorMessage);
        throw new Exception(finalErrorMessage);
    }
}